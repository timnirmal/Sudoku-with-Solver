#include <iostream>
#define N 9
#define K 20

using namespace std;

int SRN = 3;
int mat [9][9]={0};

void fill_Diag();
bool unUsedInBox(int rowStart, int colStart, int num);
void fill_3x3(int row, int col);
int randomGenerator();
bool CheckIfSafe(int i,int j,int num);
bool rowCheck_Solver(int i, int num);
bool unUsedInCol(int j,int num);
bool fill_Rest(int i, int j);
void removeKDigits();
void printBoard();

void Fill() {
        // Fill the diagonal of SRN x SRN matrices
        fillDiagonal();

        // Fill remaining blocks
        fillRemaining(0, SRN);

        // Remove Randomly K digits to make game
        //removeKDigits();
    }

    // Fill the diagonal SRN number of SRN x SRN matrices
    void fill_Diag()
    {

        for (int i = 0; i<N; i=i+SRN)

            // for diagonal box, start coordinates->i==j
            fillBox(i, i);
    }

    // Returns false if given 3 x 3 block contains num.
    bool unUsedInBox(int rowStart, int colStart, int num)
    {
        for (int i = 0; i<SRN; i++)
            for (int j = 0; j<SRN; j++)
                if (mat[rowStart+i][colStart+j]==num)
                    return false;

        return true;
    }

    // Fill a 3 x 3 matrix.
    void fill_3x3(int row, int col)
    {
        int num;
        for (int i=0; i<SRN; i++)
        {
            for (int j=0; j<SRN; j++)
            {
                do
                {
                    num = randomGenerator();
                }
                while (!unUsedInBox(row, col, num));

                mat[row+i][col+j] = num;
            }
        }
    }

    // Random generator
    int randomGenerator(){
        return (rand() % 9) + 1;
    }
    // Check if safe to put in cell
    bool CheckIfSafe(int i,int j,int num)
    {
        return (unUsedInRow(i, num) &&
                unUsedInCol(j, num) &&
                unUsedInBox(i-i%SRN, j-j%SRN, num));
    }

    // check in the row for existence
    bool rowCheck_Solver(int i, int num)
    {
        for (int j = 0; j<N; j++)
            if (mat[r][j] == num)
                return false;
        return true;
    }

    // check in the row for existence
    bool unUsedInCol(int j,int num)
    {
        for (int i = 0; i<N; i++)
            if (mat[i][j] == num)
                return false;
        return true;
    }

    // A recursive function to fill remaining
    // matrix
    bool fill_Rest(int i, int j)
    {
        // System.out.println(i+" "+j);
        if (j>=N && i<N-1)
        {
            i = i + 1;
            j = 0;
        }
        if (i>=N && j>=N)
            return true;

        if (i < SRN)
        {
            if (j < SRN)
                j = SRN;
        }
        else if (i < N-SRN)
        {
            if (j==(int)(i/SRN)*SRN)
                j = j + SRN;
        }
        else
        {
            if (j == N-SRN)
            {
                i = i + 1;
                j = 0;
                if (i>=N)
                    return true;
            }
        }

        for (int num = 1; num<=N; num++)
        {
            if (CheckIfSafe(i, j, num))
            {
                mat[i][j] = num;
                if (fillRemaining(i, j+1))
                    return true;

                mat[i][j] = 0;
            }
        }
        return false;
    }

    // Remove the K no. of digits to
    // complete game
    /*
 void removeKDigits()
    {
        int count = K;
        while (count != 0)
        {
            int cellId = randomGenerator();

            // System.out.println(cellId);
            // extract coordinates i and j
            int i = (cellId/N);
            int j = cellId%9;
            if (j != 0)
                j = j - 1;

            // System.out.println(i+" "+j);
            if (mat[i][j] != 0)
            {
                count--;
                mat[i][j] = 0;
            }
        }
    }*/

    // Print sudoku
void printBoard()
    {
        for (int i = 0; i<N; i++)
        {
            for (int j = 0; j<N; j++)
                cout<<mat[i][j] + " ";
            cout<<endl;
        }
        cout<<endl;
    }

    // Driver code
int main()
    {
        fillValues();
        printSudoku();
    }

